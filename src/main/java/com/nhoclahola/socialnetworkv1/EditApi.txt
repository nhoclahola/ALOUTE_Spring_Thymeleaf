--AdminController
package com.nhoclahola.socialnetworkv1.controller.api;

import com.nhoclahola.socialnetworkv1.dto.ApiResponse;
import com.nhoclahola.socialnetworkv1.dto.admin.response.DashBoardInfo;
import com.nhoclahola.socialnetworkv1.dto.user.request.AdminResetPassword;
import com.nhoclahola.socialnetworkv1.dto.user.request.AdminUpdateUser;
import com.nhoclahola.socialnetworkv1.dto.user.response.UserResponse;
import com.nhoclahola.socialnetworkv1.service.AdminService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/admin")
public class AdministratorController {

    private final AdminService adminService;

    @GetMapping("/dashboard")
    public ApiResponse<DashBoardInfo> getDashBoardInfo() {
        return ApiResponse.of(adminService.getDashBoardInfo());
    }

    @GetMapping("/users")
    public ApiResponse<Page<UserResponse>> getAllUsers(@RequestParam(defaultValue = "0") int page) {
        return ApiResponse.of(adminService.getAllUsersAdmin(page));
    }

    @PatchMapping("/users/{userId}")
    public ApiResponse<UserResponse> adminUpdateUser(
            @PathVariable String userId,
            @RequestBody @Valid AdminUpdateUser request) {
        return ApiResponse.of(adminService.adminUpdateUser(userId, request));
    }

    @PatchMapping("/users/{userId}/reset-password")
    public ApiResponse<UserResponse> adminUpdatePassword(
            @PathVariable String userId,
            @RequestBody @Valid AdminResetPassword request) {
        return ApiResponse.of(adminService.adminUpdatePassword(userId, request));
    }
}
--chatController
package com.nhoclahola.socialnetworkv1.controller.api;

import com.nhoclahola.socialnetworkv1.dto.ApiResponse;
import com.nhoclahola.socialnetworkv1.dto.chat.response.ChatResponse;
import com.nhoclahola.socialnetworkv1.service.ChatService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/chats")
public class ChatController {
    private final ChatService chatService;

    @PostMapping("/users/{targetUserId}")
    public ApiResponse<ChatResponse> createChat(@PathVariable String targetUserId) {
        return ApiResponse.of(chatService.createChat(targetUserId));
    }

    @GetMapping
    public ApiResponse<List<ChatResponse>> getUsersChat() {
        return ApiResponse.of(chatService.findUsersChat());
    }

    @GetMapping("/{chatId}")
    public ApiResponse<ChatResponse> getChatById(@PathVariable String chatId) {
        return ApiResponse.of(chatService.findChatByIdResponse(chatId));
    }
}
--CommentController
package com.nhoclahola.socialnetworkv1.controller.api;

import com.nhoclahola.socialnetworkv1.dto.ApiResponse;
import com.nhoclahola.socialnetworkv1.dto.comment.request.CommentCreateRequest;
import com.nhoclahola.socialnetworkv1.dto.comment.response.CommentResponse;
import com.nhoclahola.socialnetworkv1.dto.comment.response.CommentWithDataResponse;
import com.nhoclahola.socialnetworkv1.dto.user.response.UserResponse;
import com.nhoclahola.socialnetworkv1.service.CommentService;
import com.nhoclahola.socialnetworkv1.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/comments")
public class CommentController {

    private final CommentService commentService;
    private final UserService userService;

    // Tạo mới bình luận cho một bài viết
    @PostMapping("/posts/{postId}")
    public ApiResponse<CommentResponse> createComment(
            @PathVariable String postId,
            @RequestBody @Valid CommentCreateRequest request) {
        return ApiResponse.of(commentService.createComment(postId, request));
    }

    // Thích một bình luận
    @PutMapping("/{commentId}/like")
    public ApiResponse<String> likeComment(@PathVariable String commentId) {
        return ApiResponse.of(commentService.likeComment(commentId));
    }

    // Lấy chi tiết bình luận theo ID
    @GetMapping("/{commentId}")
    public ApiResponse<CommentResponse> getCommentById(@PathVariable String commentId) {
        return ApiResponse.of(commentService.findCommentByIdResponse(commentId));
    }

    // Lấy danh sách bình luận của một bài viết
    @GetMapping("/posts/{postId}")
    public ApiResponse<List<CommentWithDataResponse>> getPostsComments(
            @PathVariable String postId,
            @RequestParam(defaultValue = "0") int index) {
        return ApiResponse.of(commentService.findCommentsByPostId(postId, index));
    }

    // Lấy danh sách người dùng đã thích một bình luận
    @GetMapping("/{commentId}/users/liked")
    public ApiResponse<List<UserResponse>> getUsersLikedComment(
            @PathVariable String commentId,
            @RequestParam(defaultValue = "0") int index) {
        return ApiResponse.of(userService.findUsersLikedCommentByCommentId(commentId, index));
    }
}
--MessageController
package com.nhoclahola.socialnetworkv1.controller.api;

import com.nhoclahola.socialnetworkv1.dto.ApiResponse;
import com.nhoclahola.socialnetworkv1.dto.message.request.MessageCreateRequest;
import com.nhoclahola.socialnetworkv1.dto.message.response.MessageResponse;
import com.nhoclahola.socialnetworkv1.service.MessageService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/messages")
public class MessageController {

    private final MessageService messageService;

    // Tạo tin nhắn trong một cuộc trò chuyện
    @PostMapping("/chats/{chatId}")
    public ApiResponse<MessageResponse> createMessage(
            @PathVariable String chatId,
            @RequestBody @Valid MessageCreateRequest request) {
        return ApiResponse.of(messageService.createMessage(chatId, request));
    }

    // Lấy danh sách tin nhắn trong một cuộc trò chuyện
    @GetMapping("/chats/{chatId}")
    public ApiResponse<List<MessageResponse>> getChatsMessages(
            @PathVariable String chatId,
            @RequestParam(defaultValue = "0") int index) {
        return ApiResponse.of(messageService.findMessagesByChatId(chatId, index));
    }

    // Lấy thông tin tin nhắn theo ID
    @GetMapping("/{messageId}")
    public ApiResponse<MessageResponse> getMessageById(@PathVariable String messageId) {
        return ApiResponse.of(messageService.findMessageByIdResponse(messageId));
    }
}
